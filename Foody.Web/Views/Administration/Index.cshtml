
@{
    ViewData["Title"] = "Administration";
}

<div class="menu">
    <aside class="menu-bar">
        <h3>Content Management</h3>
        <ul class="menu-list">
            <li><a href="/Administration/Index?option=_MicroElementsPartial" id="_MicroElementsPartial">Micro Elements</a></li>
            <li><a href="/Administration/Index?option=_MacroElementsPartial" id="_MacroElementsPartial">Macro Elements</a></li>
            <li><a href="/Administration/Index?option=_FoodItemsPartial" id="_FoodItemsPartial">Food Items</a></li>
            <li><a href="/Administration/Index?option=_RecipesPartial" id="_RecipesPartial">Recipes</a></li>
        </ul>
    </aside>

    <main class="menu-option">
        @if (ViewData["Partial"] != null)
        {
            <partial name="@ViewData["Partial"]" />
        }
    </main>
    <div class="empty-option">
        <h3>Plase select an option...</h3>
    </div>
</div>


@section Scripts
{
    @if (ViewData["Partial"] != null)
    {
        <script>
            (function () {
                let partial = @ViewData["Partial"];
                partial.classList.add('clicked-item');

                document.getElementsByClassName('empty-option')[0].setAttribute('style', 'display:none');
                document.getElementsByClassName('menu-option')[0].setAttribute('style', 'display:block');
            })();
        </script>

        <script>
            let items = document.querySelectorAll('.toggle-area');
            items.forEach(function (item) {
                item.addEventListener('click', function () {
                    let onClickArea = item.parentNode.getElementsByClassName('on-click-area')[0];

                    if (onClickArea.classList.contains('clicked-area')) {
                        item.parentNode.getElementsByClassName('on-click-area')[0].classList.remove('clicked-area');
                    } else {
                        items.forEach(function (item) {
                        item.parentNode.getElementsByClassName('on-click-area')[0].classList.remove('clicked-area');
                    });

                        onClickArea.classList.add('clicked-area');
                    }
                });
            });
        </script>

        <script>
            function ChangeId(input, iterator) {
                let decomposedInput = input.split('|');
                decomposedInput[0] = iterator + '|';
                console.log(decomposedInput);
                result = decomposedInput.join('');
                return result;
            }

            function UpdateFoodItem(foodItem, id, reset) {
                let foodItemNameElement = Array.from(foodItem.childNodes).filter(c => c.tagName === 'SELECT')[0];
                let foodItemAmountElement = Array.from(foodItem.childNodes).filter(c => c.tagName === 'INPUT')[0];

                foodItemNameElement.setAttribute('name', ChangeId(foodItemNameElement.getAttribute('name'), id));
                foodItemNameElement.setAttribute('id', ChangeId(foodItemNameElement.getAttribute('id'), id));

                foodItemAmountElement.setAttribute('name', ChangeId(foodItemAmountElement.getAttribute('name'), id));
                foodItemAmountElement.setAttribute('id', ChangeId(foodItemAmountElement.getAttribute('id'), id));

                if (reset) {
                    foodItemNameElement.querySelectorAll('option').forEach(option => {
                    if (option.getAttribute('selected')) {
                        option.removeAttribute("selected")
                    }
                    });
                    foodItemNameElement.querySelectorAll('option')[0].setAttribute('selected', 'selected');

                    foodItemAmountElement.value = '';
                }
            }

            function ReEnumerateRecipe(recipeUl) {
                let foodItems = Array.from(recipeUl.childNodes).filter(c => c.tagName === 'LI');

                for (let i = 0; i < foodItems.length; i++) {
                    let foodItem = foodItems[i];

                    UpdateFoodItem(foodItem, i + 1, false);
                }
            }

            let removeButtons = document.querySelectorAll('.remove-button');

            removeButtons.forEach(function (button) {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    let parent = event.target.parentNode;
                    let upperParent = parent.parentNode;
                    upperParent.removeChild(parent);
                    ReEnumerateRecipe(upperParent);
                });
            });

            let addButtons = document.querySelectorAll('.add-button');

            addButtons.forEach(function (button) {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    let parent = event.target.parentNode;
                    let foodItemsUl = Array.from(parent.childNodes).filter(c => c.tagName === 'UL')[0];
                    let foodItems = Array.from(foodItemsUl.childNodes).filter(c => c.tagName === 'LI');
                    let lastFoodItem = foodItems[foodItems.length - 1];

                    let newFoodItem = lastFoodItem.cloneNode(true);
                    UpdateFoodItem(newFoodItem, foodItems.length + 1, true);

                    newFoodItem.querySelector('.remove-button').addEventListener('click', function (event) {
                        event.preventDefault();
                        let parent = event.target.parentNode;
                        let upperParent = parent.parentNode;
                        upperParent.removeChild(parent);
                        ReEnumerateRecipe(upperParent);
                    });

                    foodItemsUl.appendChild(newFoodItem);
                });
            });
        </script>

        <script>
            let searchInput = document.getElementById('itemSearch');

            searchInput.addEventListener('input', function () {
                let nameElements = Array.from(document.getElementsByClassName('name-search'));

                if (searchInput.value) {
                    nameElements.forEach(function (nameElement) {
                        let listItem = nameElement.parentNode.parentNode;
                        let name = nameElement.innerHTML;

                        if (!name.toLowerCase().includes(searchInput.value.toLowerCase())) {
                            listItem.setAttribute('style', 'display:none');
                        } else {
                            listItem.setAttribute('style', 'display:block');
                        }
                    });
                } else {
                    nameElements.forEach(function (nameElement) {
                        let listItem = nameElement.parentNode.parentNode;

                        listItem.setAttribute('style', 'display:block');
                    });
                }
            });
        </script>
     }
}


